#!/usr/bin/env node
/* lndup v0.5.3 GPL-3.0 <https://github.com/chinory/lndup> */
"use strict";{const e=function(){},t=require("path"),n=t.basename(process.argv[1]),o="sha1",r=20,s=function(e){for(var t=new Map,n=0;n<e.length&&e[n].length>1&&e[n].startsWith("-");++n)if(e[n].startsWith("--")){if(!(e[n].length>2)){++n;break}t.set(e[n].slice(2))}else for(let o of e[n].slice(1))t.set(o);return t.set("",e.slice(n))}(process.argv.slice(2));if(s.delete("help")|s.delete("h"))console.log(`Usage: ${n} [OPTION]... PATH...`),console.log("Hardlink duplicate files.\n\n  -n, --dry-run  don't link\n  -v, --verbose  explain what is being done\n  -q, --quiet    don't output extra information\n  -i, --stdin    read more paths from stdin\n  -h, --help     display this help and exit\n      --version  output version information and exit\n      --hasher   start as a hash work process\n\nSee <https://github.com/chinory/lndup>");else if(s.delete("version"))console.log("lndup v0.5.3");else{const i=require("fs"),c=require("crypto"),l=require("readline");if(s.delete("hasher"))!function(){const t=Buffer.allocUnsafe(16777216),n=Buffer.alloc(r);l.createInterface({input:process.stdin}).on("line",r=>{0===r.length&&process.exit();try{var s=i.openSync(r,"r");let e=i.fstatSync(s).size;const a=c.createHash(o);for(;e>16777216;)i.readSync(s,t,0,16777216,null),a.update(t),e-=16777216;i.readSync(s,t,0,e,null);var l=a.update(t.slice(0,e)).digest()}catch(e){process.stdout.write(n),process.stderr.write(`#${e}\n`)}s&&(i.close(s,e),l&&process.stdout.write(l))})}();else{const e=require("child_process"),a=0==(s.delete("dry-run")|s.delete("n")),f=(s.delete("verbose")|s.delete("v"))>0,u=0==(s.delete("quiet")|s.delete("q")),d=(s.delete("stdin")|s.delete("i"))>0;if(s.size>1){for(const e of s.keys())if(e.length>0){console.error(`${n}: invalid option -- ${e}`);break}console.error(`Try '${n} --help' for more information.`),process.exit(1)}const h=require("os").cpus().length,p=8192,g=["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],m=function(e){for(var t=0;t<8&&e>=1024;++t)e/=1024;return e.toFixed(t)+g[t]},v=function(){const e=[];for(const t of arguments)for(const n in t)t[n]=t[n].toString(),(void 0===e[n]||t[n].length>e[n])&&(e[n]=t[n].length);for(const t of arguments){for(const n in t)t[n]=t[n].padStart(e[n]);console.log(t.join("  "))}},y=function(e){return console.error(`#${e}`)},S=function(e){if(e)return y(e)},w=function(t,n){var o=[],s=[],i=n;function c(e){return process.stderr.write(e)}function l(){const n=[],i=e.spawn(process.argv0,[process.argv[1],"--hasher"],{windowsHide:!0});i.stdout.on("readable",()=>{for(var e;null!==(e=i.stdout.read(r));)t(e,n.shift())}),i.stderr.on("data",c),o.push(i),s.push(n)}do{l()}while(--i>0);return[function(e,t){s[i].push(t),o[i].stdin.write(`${e}\n`),++i===n&&(i=0)},function(){for(const e of o)e.stdin.write("\n")}]},$=function(e,t){const n=`${t}.${c.randomBytes(8).toString("hex")}`;i.renameSync(t,n);try{i.linkSync(e,t)}catch(e){try{i.renameSync(n,t)}catch(e){console.error(`mv -f -- '${n}' '${t}' #${e}`)}throw e}try{i.unlinkSync(n)}catch(e){console.error(`rm -f -- '${n}' #${e}`)}};class b extends Map{get_array(e){if(this.has(e))return this.get(e);{let t=[];return this.set(e,t),t}}get_map(e){if(this.has(e))return this.get(e);{let t=new b;return this.set(e,t),t}}}!function(){var e,n;(e=s.get(""),n=d?l.createInterface({input:process.stdin}):void 0,new Promise(o=>{u&&console.time("#Time: probe");var r=0,s=new b,c=new Map,l=0,a=0,f=0,d=0,h=0,p=0;function g(){return u&&(v(["#Stat: probe: readdir",m(p),h],["#Stat: probe: stat   ",m(d),f],["#Stat: probe: select ",m(a),l]),console.timeEnd("#Time: probe")),o(s)}function S(e){return++r,++h,i.readdir(e,(n,o)=>{if(--r,n)y(n);else for(const n of o){const o=t.join(e,n);p+=o.length,w(o)}if(0===r)return g()})}function w(e){if(!c.has(e))return c.set(e,!1),++r,++f,i.lstat(e,(t,n)=>{if(--r,t)y(t);else if(!1===c.get(e)){if(c.set(e,!0),n.isDirectory())return S(e);n.isFile()&&(d+=n.size,n.size>0&&(++l,a+=n.size,s.get_map(n.dev).get_map(n.size).get_map("").get_array(n.ino).push(e)))}if(0===r)return g()})}if(e)for(const n of e)w(t.join(n));n&&(++r,n.on("line",e=>w(t.join(e))).on("close",()=>{if(0==--r)return g()}))})).then(function(e){return new Promise(t=>{u&&console.time("#Time: verify");var n,s,l=0,a=p,f=0,d=0,g=0,$=0,b=0,B=0,T=0,x=Buffer.allocUnsafe(p),q=Buffer.alloc(r);function _(){return u&&(v(["#Stat: verify: internal",m(d),f],["#Stat: verify: external",m($),g]),console.timeEnd("#Time: verify")),s(),t(e)}[n,s]=w(function(e,t){if(--l,e.equals(q)||t[0].get_map(e.toString("binary")).set(t[1],t[2]),0===l)return _()},h);for(const t of e.values())for(const[e,r]of t){const t=r.get("");if(t){if(t.size>1)for(const[s,u]of t){if(e>a)++g,$+=e,++l,n(u[0],[r,s,u]);else{let t;++f,d+=e;try{t=i.openSync(u[0],"r");const n=c.createHash(o);i.readSync(t,x,0,e,null),n.update(x.slice(0,e)),r.get_map(n.digest("binary")).set(s,u)}catch(e){y(e)}t&&i.close(t,S)}a=p*(B+=e)/(b+B),8==++T&&(T=4,b>>=1,B>>=1)}r.delete("")}}if(0===l)return _()})}).then(function(e){u&&console.time("#Time: solve");const t=[];for(const n of e.values())for(const[e,o]of n)for(const n of o.values())if(n.size>1){let o=0,r=0;const s=[];for(const[e,t]of n)t.length>o&&(o=t.length,r=e);for(const[e,t]of n)e!==r&&s.push(...t);t.push([e,n.get(r)[0],s])}return console.timeEnd("#Time: solve"),t}).then(function(e){u&&console.time("#Time: execute");var t=0,n=0,o=0,r=0,s=0,i=0,c=0,l=0,d=0;for(const[u,h,p]of e){let e=0,g=0;for(const n of p){if(f&&console.log(`ln -f -- '${h}' '${n}'`),a)try{$(h,n),r+=u,e=1,i+=1}catch(e){console.error(`ln -f -- '${h}' '${n}' #${e}`),c+=u,g=1,d+=1}t+=u,o+=1}n+=1,s+=e,l+=g}u&&(console.timeEnd("#Time: execute"),v(["#Result: TODO:",m(t),n,o],["#Result: DONE:",m(r),s,i],["#Result: FAIL:",m(c),l,d]))})}()}}}