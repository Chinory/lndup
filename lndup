#!/usr/bin/env node
/*lndup v0.1 GPL-3.0 <https://github.com/chinory/lndup>*/
const fs=require("fs"),path=require("path"),crypto=require("crypto");function rua(t){console.error("#%s",t)}function link(t,o){const r=o+"."+crypto.randomBytes(8).toString("hex");fs.renameSync(o,r);try{fs.linkSync(t,o)}catch(t){try{fs.renameSync(r,o)}catch(t){console.error("mv -f -- '%s' '%s' #%s",r,o,t)}throw t}try{fs.unlinkSync(r)}catch(t){console.error("rm -f -- '%s' #%s",r,t)}}Map.prototype.getd_array=function(t){let o=this.get(t);return void 0===o&&(o=[],this.set(t,o)),o},Map.prototype.getd_map=function(t){let o=this.get(t);return void 0===o&&(o=new Map,this.set(t,o)),o};const SIZE_UNIT=["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"];function szstr(t){for(var o=0;o<8&&t>=1024;++o)t/=1024;return t.toFixed(o)+SIZE_UNIT[o]}function printt(t){const o=Array(t[0].length).fill(0);for(const r of t)for(const t in r)r[t]=r[t].toString(),r[t].length>o[t]&&(o[t]=r[t].length);for(const r of t){for(const t in r)r[t]=r[t].padStart(o[t]);console.log(r.join("  "))}}function probe(t){return new Promise(o=>{var r=0;const n=new Map;function e(t){return++r,fs.readdir(t,(e,c)=>{if(--r,e)rua(e);else for(const o of c)s(path.join(t,o));if(0===r)return o(n)})}function s(t){return++r,fs.lstat(t,(s,c)=>{if(--r,s)rua(s);else{if(c.isDirectory())return e(t);c.isFile()&&c.size>0&&n.getd_map(c.dev).getd_map(c.size).getd_map("").getd_array(c.ino).push(t)}if(0===r)return o(n)})}for(const o of t)s(o)})}const SMALL_FILE=16777216;function verify(t){const o=Buffer.allocUnsafe(SMALL_FILE);for(const[r,n]of t)for(const[t,r]of n){const n=r.get("");if(void 0!==n){if(n.size>1)for(const[e,s]of n){let n;for(const t of s)try{n=fs.openSync(t,"r");break}catch(t){rua(t)}if(n){let c;try{const r=crypto.createHash("sha1");let e=t;for(;e>SMALL_FILE;)fs.readSync(n,o,0,SMALL_FILE,null),r.update(o),e-=SMALL_FILE;fs.readSync(n,o,0,e,null),c=r.update(o.slice(0,e)).digest("binary")}catch(t){rua(t)}try{fs.closeSync(n)}catch(t){rua(t)}c&&r.getd_map(c).set(e,s)}}r.delete("")}}return t}function plan(t){const o=[];for(const[r,n]of t)for(const[t,r]of n)for(const[n,e]of r)if(e.size>1){let r=0,n=0;for(const[t,o]of e)o.length>n&&(n=o.length,r=t);const s=[];for(const[t,o]of e)t!==r&&s.push(...o);o.push([t,e.get(r)[0],s])}return o}function execute(t){var o,r,n=0,e=0,s=0,c=0,f=0,i=0,a=0;for(const[o,r,u]of t){let t=0,l=0;for(const n of u)try{link(r,n),e+=o,t=1,c+=1}catch(t){console.error("ln -f -- '%s' '%s' #%s",r,n,t),f+=o,l=1,a+=1}n+=1,s+=t,i+=l}r=c+a,printt([["#Done:  TODO",szstr(o=e+f),o,n,r],["#Done:  SUCC",szstr(e),e,s,c],["#Done:  FAIL",szstr(f),f,i,a]])}probe(process.argv.splice(2)).then(verify).then(plan).then(execute);