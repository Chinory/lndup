#!/usr/bin/env node
'use strict'
const path = require('path')
const BASENAME = path.basename(process.argv[1])
const opts = (() => {
  const parse = require('pargv-lite')
  const options = {
    action: { def: true, set: ['n', 'dry-run'] },
    verbose: { def: false, set: ['v', 'verbose'] },
    prompt: { def: true, set: ['q', 'quiet'] },
    stdin: { def: false, set: ['i', 'stdin'] },
    fileFilters: { def: [], set: ['f', 'filter-file'] },
    dirFilters: { def: [], set: ['d', 'filter-dir'] },
    extraKeys: { def: [], set: ['k', 'key'] },
    hash: { def: 'sha1', set: ['hash'] },
    help: { def: false, set: ['h', 'help'] },
    version: { def: false, set: ['version'] },
    hasher: { def: false, set: ['hasher'] }
  }
  try {
    return parse(process.argv.slice(2), options)
  } catch (err) {
    console.error(`${BASENAME}: ${err.message}`)
    console.error(`Try '${BASENAME} --help' for more information.`)
    process.exit(1)
  }
})()

if (process.argv.length < 3 || opts.help) {
  console.log(`Usage: ${BASENAME} [options] [paths]`)
  console.log('Hardlink duplicate files.')
  console.log('')
  console.log('Options:')
  console.log('  -n, --dry-run  don\'t link')
  console.log('  -v, --verbose  explain what is being done')
  console.log('  -q, --quiet    don\'t output extra information')
  console.log('  -i, --stdin    read more paths from stdin')
  console.log('')
  console.log('  -f, --filter-file <function>  add a file filter:')
  console.log('          (stats: fs.Stats, path: string): boolean')
  console.log('  -d, --filter-dir  <function>  add a directory filter:')
  console.log('          (stats: fs.Stats, path: string, files: string[]): boolean')
  console.log('')
  console.log('  -k, --key  <function>  add a key to distinguish files:')
  console.log('          (stats: fs.Stats, path: string): any')
  console.log('')
  console.log('      --hash <algorithm>  select a digest algorithm, default: sha1')
  console.log('')
  console.log('  -h, --help     display this help and exit')
  console.log('      --version  output version information and exit')
  console.log('')
  console.log('See <https://github.com/chinory/lndup>')
} else if (opts.version) {
  console.log('lndup v1.2.8')
} else {
  const fs = require('fs')
  const crypto = require('crypto')
  const readline = require('readline')
  const HASH_ALGORITHM = opts.hash
  const HASH_LENGTH = (() => {
    try {
      return crypto.createHash(HASH_ALGORITHM).digest().length
    } catch (err) {
      console.error(`${BASENAME}: ${err.message} -- ${HASH_ALGORITHM}`)
      console.error("Try 'openssl list -digest-algorithms' for available digest algorithms.")
      process.exit(1)
    }
  })()
  if (opts.hasher) {
    const noop = () => {}
    const buff = Buffer.allocUnsafe(4194304)
    const HASH_FAIL = Buffer.alloc(HASH_LENGTH)
    readline.createInterface({input: process.stdin})
      .on('line', line => {
        if (line.length === 0) {
          process.exit()
        }
        let fd, digest
        try {
          fd = fs.openSync(line, 'r')
          let len = fs.fstatSync(fd).size
          const hasher = crypto.createHash(HASH_ALGORITHM)
          while (len > 4194304) {
            fs.readSync(fd, buff, 0, 4194304, null)
            hasher.update(buff)
            len -= 4194304
          }
          fs.readSync(fd, buff, 0, len, null)
          hasher.update(buff.slice(0, len))
          digest = hasher.digest()
        } catch (err) {
          process.stdout.write(HASH_FAIL)
          process.stderr.write('#' + err + '\n')
        }
        if (fd) {
          fs.close(fd, noop)
          if (digest) {
            process.stdout.write(digest)
          }
        }
      })
  } else {
    const os = require('os')
    const child_process = require('child_process')

    const SIZE_UNIT = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
    const szstr = size => {
      for (var i = 0; size >= 1024 && i < 8; ++i) size /= 1024
      return size.toFixed(i) + SIZE_UNIT[i]
    }

    const printTable = (...lines) => {
      const maxlen = []
      for (const line of lines) {
        for (const i in line) {
          line[i] = line[i].toString()
          if (i >= maxlen.length || line[i].length > maxlen[i]) {
            maxlen[i] = line[i].length
          }
        }
      }
      for (const line of lines) {
        for (const i in line) {
          line[i] = line[i].padStart(maxlen[i])
        }
        console.log(line.join('  '))
      }
    }

    const report = err => {
      return console.error('#' + err)
    }

    const reportIf = err => {
      if (err) return report(err)
    }

    class HasherManager {
      constructor (n) {
        this.callbacks = []
        this.processes = []
        this.cur = 0
        if (n) this.spawn(n)
      }
      spawn (n) {
        while (n-- > 0) {
          const queue = []
          const proc = child_process.spawn(
            process.argv0,
            [process.argv[1], '--hasher', '--hash', HASH_ALGORITHM],
            {windowsHide: true}
          )
          proc.stderr.on('data', HasherManager._writeStderr)
          proc.stdout.on('readable', () => {
            for (let buff; (buff = proc.stdout.read(HASH_LENGTH)) !== null;) {
              queue.shift()(buff)
            }
          })
          this.processes.push(proc)
          this.callbacks.push(queue)
        }
      }
      assign (path, callback) {
        this.callbacks[this.cur].push(callback)
        this.processes[this.cur].stdin.write(path + '\n')
        if (++this.cur >= this.processes.length) this.cur = 0
      }
      stop () {
        for (const proc of this.processes) {
          proc.stdin.write('\n')
        }
        this.processes.length = 0
        this.callbacks.length = 0
      }
      static _writeStderr (chunk) {
        process.stderr.write(chunk)
      }
    }

    const link = (src, dst) => {
      const sav = `${dst}.${crypto.randomBytes(8).toString('hex')}`
      fs.renameSync(dst, sav)
      try {
        fs.linkSync(src, dst)
      } catch (err) {
        try {
          fs.renameSync(sav, dst)
        } catch (err) {
          console.error(`mv -f -- '${sav}' '${dst}' #${err}`)
        }
        throw err
      }
      try {
        fs.unlinkSync(sav)
      } catch (err) {
        console.error(`rm -f -- '${sav}' #${err}`)
      }
    }

    class DefaultMap extends Map {
      getArray (key) {
        if (this.has(key)) {
          return this.get(key)
        } else {
          const value = []
          this.set(key, value)
          return value
        }
      }
      getMap (key) {
        if (this.has(key)) {
          return this.get(key)
        } else {
          const value = new DefaultMap()
          this.set(key, value)
          return value
        }
      }
    }

    const MapDeepIterator = function * (map, maxDepth) {
      if (maxDepth < 1) {
        yield map
        return
      }
      for (const stack = [map.values()]; stack.length > 0;) {
        const result = stack[stack.length - 1].next()
        if (result.done) {
          stack.pop()
        } else if (stack.length < maxDepth && result.value instanceof Map) {
          stack.push(result.value.values())
        } else {
          yield result.value
        }
      }
    }

    const evalHere = x => {
      return eval(x)
    }

    const probe = paths => {
      return new Promise(resolve => {
        if (opts.prompt) {
          console.time('#Time: probe')
        }
        const st = {
          readdir: { size: 0, count: 0 },
          stat: { size: 0, count: 0 },
          select: { size: 0, count: 0 }
        }
        const done = () => {
          if (opts.prompt) {
            printTable(
              ['#Stat: probe: readdir', szstr(st.readdir.size), st.readdir.count],
              ['#Stat: probe: stat   ', szstr(st.stat.size), st.stat.count],
              ['#Stat: probe: select ', szstr(st.select.size), st.select.count]
            )
            console.timeEnd('#Time: probe')
          }
          return resolve(devMap)
        }
        const devMap = new DefaultMap()
        const pathState = new Map()
        const stat = _path => {
          if (!pathState.has(_path)) {
            pathState.set(_path, false)
            ++cbs
            return fs.lstat(_path, (err, stats) => {
              --cbs
              if (err) {
                report(err)
              } else {
                st.stat.count++
                st.stat.size += stats.size
                if (pathState.get(_path) === false) {
                  pathState.set(_path, true)
                  if (stats.isDirectory()) {
                    return readdir(_path, stats)
                  } else if (stats.isFile() && stats.size > 0 && paths.filter.file(stats, _path)) {
                    st.select.count++
                    st.select.size += stats.size
                    let map = devMap.getMap(stats.dev).getMap(stats.size)
                    for (const key of paths.exkeys(stats, _path)) {
                      map = map.getMap(key)
                    }
                    map.getMap('').getArray(stats.ino).push(_path)
                  }
                }
              }
              if (cbs === 0) return done()
            })
          }
        }
        const readdir = (_path, stats) => {
          ++cbs
          return fs.readdir(_path, (err, files) => {
            --cbs
            if (err) {
              report(err)
            } else if (paths.filter.dir(stats, _path, files)) {
              st.readdir.count++
              for (const name of files) {
                const pathname = path.join(_path, name)
                st.readdir.size += Buffer.byteLength(pathname)
                stat(pathname)
              }
            }
            if (cbs === 0) return done()
          })
        }
        let cbs = 0
        if (paths.array) {
          for (const _path of paths.array) {
            stat(path.join(_path))
          }
        }
        if (paths.readline) {
          ++cbs
          paths.readline.on('line', path => stat(path.join(path)))
            .on('close', () => { if (--cbs === 0) return done() })
        }
        if (cbs === 0) return done()
      })
    }
    const verify = devMap => {
      return new Promise(resolve => {
        if (opts.prompt) {
          console.time('#Time: verify')
        }
        const st = {
          hashInt: { size: 0, count: 0 },
          hashExt: { size: 0, count: 0 }
        }
        const done = () => {
          hashers.stop()
          if (opts.prompt) {
            printTable(
              ['#Stat: verify: internal', szstr(st.hashInt.size), st.hashInt.count],
              ['#Stat: verify: external', szstr(st.hashExt.size), st.hashExt.count],
              ['#Stat: verify: total   ', szstr(st.hashInt.size + st.hashExt.size), st.hashInt.count + st.hashExt.count]
            )
            console.timeEnd('#Time: verify')
          }
          return resolve(devMap)
        }
        const buff = Buffer.allocUnsafe(4096)
        const HASH_FAIL = Buffer.alloc(HASH_LENGTH)
        const hashers = new HasherManager(os.cpus().length)
        let cbs = 0
        for (const sizeMap of devMap.values()) {
          for (const [size, exkeyMap] of sizeMap) {
            for (const contentMap of MapDeepIterator(exkeyMap, opts.extraKeys.length)) {
              const inoMap = contentMap.get('')
              if (inoMap) {
                contentMap.delete('')
                if (inoMap.size > 1) {
                  for (const [ino, paths] of inoMap) {
                    if (size > 4096) {
                      st.hashExt.count++
                      st.hashExt.size += size
                      ++cbs
                      hashers.assign(paths[0], hash => {
                        if (!hash.equals(HASH_FAIL)) {
                          contentMap.getMap(hash.toString('binary')).set(ino, paths)
                        }
                        if (--cbs === 0) return done()
                      })
                    } else {
                      st.hashInt.count++
                      st.hashInt.size += size
                      let fd
                      try {
                        fd = fs.openSync(paths[0], 'r')
                        const hash = crypto.createHash(HASH_ALGORITHM)
                        fs.readSync(fd, buff, 0, size, null)
                        hash.update(buff.slice(0, size))
                        contentMap.getMap(hash.digest('binary')).set(ino, paths)
                      } catch (err) {
                        report(err)
                      }
                      if (fd) {
                        fs.close(fd, reportIf)
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (cbs === 0) return done()
      })
    }
    const solve = devMap => {
      if (opts.prompt) {
        console.time('#Time: solve')
      }
      const st = { size: 0, count: 0 }
      const solutions = []
      for (const sizeMap of devMap.values()) {
        for (const [size, exkeyMap] of sizeMap) {
          for (const contentMap of MapDeepIterator(exkeyMap, opts.extraKeys.length)) {
            for (const inoMap of contentMap.values()) {
              if (inoMap.size > 1) {
                let majorNum = 0
                let majorIno
                for (const [ino, paths] of inoMap) {
                  if (majorNum < paths.length) {
                    majorNum = paths.length
                    majorIno = ino
                  }
                }
                let src
                let dsts = []
                for (const [ino, paths] of inoMap) {
                  if (ino === majorIno) {
                    src = paths[0]
                  } else {
                    dsts.push(...paths)
                  }
                }
                solutions.push([size, src, dsts])
                st.count += dsts.length + 1
                st.size += size * (dsts.length + 1)
              }
            }
          }
        }
      }
      if (opts.prompt) {
        console.log(`#Stat: solve: current  ${szstr(st.size)}  ${st.count}`)
        console.timeEnd('#Time: solve')
      }
      return solutions
    }
    const execute = solutions => {
      if (opts.prompt) {
        console.time('#Time: execute')
      }
      const st = {
        todo: {size: 0, src: 0, dst: 0},
        succ: {size: 0, src: 0, dst: 0},
        fail: {size: 0, src: 0, dst: 0}
      }
      for (const [size, src, dsts] of solutions) {
        let succ = 0
        let fail = 0
        for (const dst of dsts) {
          if (opts.verbose) {
            console.log(`ln -f -- '${src}' '${dst}'`)
          }
          if (opts.action) {
            try {
              link(src, dst)
              succ = 1
              st.succ.dst++
              st.succ.size += size
            } catch (err) {
              console.error(`ln -f -- '${src}' '${dst}' #${err}`)
              fail = 1
              st.fail.dst++
              st.fail.size += size
            }
          }
          st.todo.dst++
          st.todo.size += size
        }
        st.todo.src++
        st.succ.src += succ
        st.fail.src += fail
      }
      if (opts.prompt) {
        printTable(
          ['#Stat: execute: todo', szstr(st.todo.size), st.todo.src, st.todo.dst],
          ['#Stat: execute: done', szstr(st.succ.size), st.succ.src, st.succ.dst],
          ['#Stat: execute: fail', szstr(st.fail.size), st.fail.src, st.fail.dst]
        )
        console.timeEnd('#Time: execute')
      }
    }
    probe({
      array: opts._,
      readline: opts.stdin ? readline.createInterface({input: process.stdin}) : undefined,
      filter: (function compileFilters () {
        const filter = {}
        try {
          { const filters = opts.fileFilters.map(evalHere)
            filter.file = (stats, path) => {
              try {
                for (const filter of filters) {
                  if (!filter(stats, path)) {
                    return false
                  }
                }
              } catch (err) {
                console.error(`${BASENAME}: filter runtime error:`)
                console.error(err)
                process.exit(1)
              }
              return true
            }
          }
          { const filters = opts.dirFilters.map(evalHere)
            filter.dir = (stats, path, files) => {
              try {
                for (const filter of filters) {
                  if (!filter(stats, path, files)) {
                    return false
                  }
                }
              } catch (err) {
                console.error(`${BASENAME}: filter runtime error:`)
                console.error(err)
                process.exit(1)
              }
              return true
            }
          }
        } catch (err) {
          console.error(`${BASENAME}: filter compilation error:`)
          console.error(err)
          process.exit(1)
        }
        return filter
      })(),
      exkeys: (function compileExtraKeys () {
        try {
          const calculator = opts.extraKeys.map(evalHere)
          return (stats, path) => {
            try {
              return calculator.map(calc => calc(stats, path))
            } catch (err) {
              console.error(`${BASENAME}: key calculator runtime error:`)
              console.error(err)
              process.exit(1)
            }
          }
        } catch (err) {
          console.error(`${BASENAME}: key calculator compilation error:`)
          console.error(err)
          process.exit(1)
        }
      })()
    })
      .then(verify)
      .then(solve)
      .then(execute)
  }
}
